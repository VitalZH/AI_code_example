#!pip install pandas autokeras openpyxl
import pandas as pd
import tensorflow as tf
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.preprocessing import LabelEncoder
from keras.models import Sequential
from keras.layers import Dense
from scipy.sparse import coo_matrix

from google.colab import files
uploaded = files.upload()

# Загрузка данных из таблицы Excel
data = pd.read_csv('trainin_list_csv.csv')

# Разделение данных на обучающую и проверочную выборки
train_data, test_data, train_labels, test_labels = train_test_split(data['Название'], data['Категория'], test_size=0.2, random_state=42)

# Преобразование текстовых названий в числовые векторы
vectorizer = CountVectorizer()
train_features = vectorizer.fit_transform(train_data)
test_features = vectorizer.transform(test_data)

# Преобразование меток категорий в числовой формат
label_encoder = LabelEncoder()
train_labels = label_encoder.fit_transform(train_labels)
test_labels = label_encoder.transform(test_labels)

# Создание модели нейронной сети
model = Sequential()
model.add(Dense(64, activation='relu', input_dim=train_features.shape[1]))
model.add(Dense(64, activation='relu'))
model.add(Dense(len(label_encoder.classes_), activation='softmax'))

# Компиляция и обучение модели
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Преобразование текстовых названий в числовые векторы
train_features = coo_matrix(train_features)
test_features = coo_matrix(test_features)

# Создание разреженных тензоров из разреженных матриц
train_features_sparse = tf.sparse.SparseTensor(
    indices=np.column_stack((train_features.row, train_features.col)),
    values=train_features.data,
    dense_shape=train_features.shape
)
test_features_sparse = tf.sparse.SparseTensor(
    indices=np.column_stack((test_features.row, test_features.col)),
    values=test_features.data,
    dense_shape=test_features.shape
)

# Пересортировка индексов разреженных тензоров
train_features_sparse = tf.sparse.reorder(train_features_sparse)
test_features_sparse = tf.sparse.reorder(test_features_sparse)

# Конвертация разреженных тензоров обратно в разреженные матрицы
train_features = tf.sparse.to_dense(train_features_sparse)
test_features = tf.sparse.to_dense(test_features_sparse)

model.fit(train_features, train_labels, epochs=10, batch_size=32, validation_data=(test_features, test_labels))

# Оценка точности модели на проверочной выборке
accuracy = model.evaluate(test_features, test_labels)[1]
print('Accuracy:', accuracy)
